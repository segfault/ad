// parsing mathematical expressions
package parser

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"log"
	"os"
	"os/exec"
	"sort"
	"strconv"
	"strings"
)

//go:generate nex lexer.nex
//go:generate go tool yacc -o parser.y.go parser.y
const (
	numberNT     NodeType = "NUM"
	identifierNT NodeType = "IDENT"
	binaryNT     NodeType = "BIN"
	functionNT   NodeType = "FUNC"
)

type NodeType string

type Node struct {
	Type NodeType `json:"T,omitempty"`
	S    string   `json:",omitempty"`
	F    float64  `json:",omitempty"`
	N    []*Node  `json:",omitempty"`
	name string   `json:",omitempty"`
}

func (n Node) String() string {
	buf, err := json.Marshal(n)
	check(err)
	return string(buf)
}

const formula = `a := 99*(5*x + 55)/6 + y`

func Run(args []string) {
	lex := NewContext(NewLexer(strings.NewReader(formula)))
	yyParse(lex)
	pgm := new(bytes.Buffer)
	y, vars := linearize(pgm, lex.rhs)
	var list []string
	for v := range vars {
		list = append(list, v)
	}
	sort.Strings(list)
	f, err := os.Create("compute.go")
	check(err)

	decls := new(bytes.Buffer)
	for _, v := range list {
		fmt.Fprintf(decls, "%s := rand.Float64();\n", v)
	}

	fmt.Fprintf(f, `// AUTOGENERATED, DO NOT EDIT!!
package main
import (
"fmt"
"math/rand"
)
func main() {
%s %s 
fmt.Printf("formula: %%f\n",%s);
fmt.Printf("parsed : %%f\n",Compute(%s))
}

func Compute(%s float64) float64 {
%s return %s;
}

`,
		decls.String(),
		formula,
		lex.lhs.S,
		strings.Join(list, ", "),
		strings.Join(list, ", "),
		pgm.String(), y,
	)
	f.Close()
	cmd := exec.Command("gofmt", "-w", "compute.go")
	check(cmd.Run())
}

var i int

func linearize(w io.Writer, rhs *Node) (string, map[string]struct{}) {
	vars := make(map[string]struct{})
	add := func(_ string, m map[string]struct{}) {
		for k := range m {
			vars[k] = struct{}{}
		}
	}
	switch rhs.Type {
	case numberNT:
		fmt.Fprintf(w, "v%d := %f\n", i, rhs.F)
		rhs.name = fmt.Sprintf("v%d", i)
		i++
	case identifierNT:
		fmt.Fprintf(w, "v%d := %s\n", i, rhs.S)
		rhs.name = fmt.Sprintf("v%d", i)
		vars[rhs.S] = struct{}{}
		i++
	case binaryNT:
		add(linearize(w, rhs.N[0]))
		add(linearize(w, rhs.N[1]))
		fmt.Fprintf(w, "v%d := %s %s %s\n", i, rhs.N[0].name, rhs.S, rhs.N[1].name)
		rhs.name = fmt.Sprintf("v%d", i)
		i++
	}
	return rhs.name, vars
}

func Function(ident string, args ...*Node) *Node {
	return &Node{
		Type: functionNT,
		S:    ident,
		N:    args,
	}
}

func Number(n float64) *Node {
	return &Node{
		Type: numberNT,
		F:    n,
	}
}

func LexIdentifier(s string) *Node {
	return &Node{
		Type: identifierNT,
		S:    s,
	}
}

func LexNumber(s string) *Node {
	n, err := strconv.ParseFloat(s, 64)
	check(err)
	return Number(n)
}

func Binary(op rune, a, b *Node) *Node {
	return &Node{
		Type: binaryNT,
		S:    fmt.Sprintf("%c", op),
		N:    []*Node{a, b},
	}
}

func Negate(a *Node) *Node {
	return Binary('*', Number(-1), a)
}

type context struct {
	lhs *Node
	rhs *Node
	yyLexer
}

func NewContext(y yyLexer) *context {
	return &context{yyLexer: y}
}

func (context) Error(e string) {
	log.Printf("oops: %v\n", e)
	os.Exit(1)
}

func check(e error) {
	if e != nil {
		panic(e)
	}
}
