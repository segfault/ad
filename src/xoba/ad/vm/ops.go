// autogenerated, do not edit!
package vm

type VmOp uint64

const (
	_ VmOp = iota

	Abs           // absolute value
	Acos          //
	Add           //
	Asin          //
	Atan          //
	Cos           //
	Cosh          //
	D_Abs_D0      // derivative of first argument of Abs
	D_Acos_D0     // derivative of first argument of Acos
	D_Add_D0      // derivative of first argument of Add
	D_Add_D1      // derivative of second argument of Add
	D_Asin_D0     // derivative of first argument of Asin
	D_Atan_D0     // derivative of first argument of Atan
	D_Cos_D0      // derivative of first argument of Cos
	D_Cosh_D0     // derivative of first argument of Cosh
	D_Divide_D0   // derivative of first argument of Divide
	D_Divide_D1   // derivative of second argument of Divide
	D_Exp10_D0    // derivative of first argument of Exp10
	D_Exp2_D0     // derivative of first argument of Exp2
	D_Exp_D0      // derivative of first argument of Exp
	D_Log10_D0    // derivative of first argument of Log10
	D_Log2_D0     // derivative of first argument of Log2
	D_Log_D0      // derivative of first argument of Log
	D_Multiply_D0 // derivative of first argument of Multiply
	D_Multiply_D1 // derivative of second argument of Multiply
	D_Pow_D0      // derivative of first argument of Pow
	D_Pow_D1      // derivative of second argument of Pow
	D_Sin_D0      // derivative of first argument of Sin
	D_Sinh_D0     // derivative of first argument of Sinh
	D_Sqrt_D0     // derivative of first argument of Sqrt
	D_Subtract_D0 // derivative of first argument of Subtract
	D_Subtract_D1 // derivative of second argument of Subtract
	D_Tan_D0      // derivative of first argument of Tan
	D_Tanh_D0     // derivative of first argument of Tanh
	Divide        //
	Exp           //
	Exp10         // 10^x
	Exp2          // 2^x
	GetInput      // copy input to register
	GetModel      // copy model to register
	Halt          //
	Inputs        // validate input dimension is large enough
	Literal       //
	Log           //
	Log10         //
	Log2          //
	Models        // validate model dimension is large enough
	Multiply      //
	Outputs       // validate output dimension is large enough
	Pow           //
	Registers     // 1 argument, sets the number of registers
	SetOutput     // copy register to output
	Sin           //
	Sinh          //
	Sqrt          //
	Subtract      //
	Tan           //
	Tanh          //

)

var AllOps []VmOp = []VmOp{
	Abs,
	Acos,
	Add,
	Asin,
	Atan,
	Cos,
	Cosh,
	D_Abs_D0,
	D_Acos_D0,
	D_Add_D0,
	D_Add_D1,
	D_Asin_D0,
	D_Atan_D0,
	D_Cos_D0,
	D_Cosh_D0,
	D_Divide_D0,
	D_Divide_D1,
	D_Exp10_D0,
	D_Exp2_D0,
	D_Exp_D0,
	D_Log10_D0,
	D_Log2_D0,
	D_Log_D0,
	D_Multiply_D0,
	D_Multiply_D1,
	D_Pow_D0,
	D_Pow_D1,
	D_Sin_D0,
	D_Sinh_D0,
	D_Sqrt_D0,
	D_Subtract_D0,
	D_Subtract_D1,
	D_Tan_D0,
	D_Tanh_D0,
	Divide,
	Exp,
	Exp10,
	Exp2,
	GetInput,
	GetModel,
	Halt,
	Inputs,
	Literal,
	Log,
	Log10,
	Log2,
	Models,
	Multiply,
	Outputs,
	Pow,
	Registers,
	SetOutput,
	Sin,
	Sinh,
	Sqrt,
	Subtract,
	Tan,
	Tanh,
}

func (o VmOp) String() string {
	switch o {
	case Abs:
		return "Abs"
	case Acos:
		return "Acos"
	case Add:
		return "Add"
	case Asin:
		return "Asin"
	case Atan:
		return "Atan"
	case Cos:
		return "Cos"
	case Cosh:
		return "Cosh"
	case D_Abs_D0:
		return "D_Abs_D0"
	case D_Acos_D0:
		return "D_Acos_D0"
	case D_Add_D0:
		return "D_Add_D0"
	case D_Add_D1:
		return "D_Add_D1"
	case D_Asin_D0:
		return "D_Asin_D0"
	case D_Atan_D0:
		return "D_Atan_D0"
	case D_Cos_D0:
		return "D_Cos_D0"
	case D_Cosh_D0:
		return "D_Cosh_D0"
	case D_Divide_D0:
		return "D_Divide_D0"
	case D_Divide_D1:
		return "D_Divide_D1"
	case D_Exp10_D0:
		return "D_Exp10_D0"
	case D_Exp2_D0:
		return "D_Exp2_D0"
	case D_Exp_D0:
		return "D_Exp_D0"
	case D_Log10_D0:
		return "D_Log10_D0"
	case D_Log2_D0:
		return "D_Log2_D0"
	case D_Log_D0:
		return "D_Log_D0"
	case D_Multiply_D0:
		return "D_Multiply_D0"
	case D_Multiply_D1:
		return "D_Multiply_D1"
	case D_Pow_D0:
		return "D_Pow_D0"
	case D_Pow_D1:
		return "D_Pow_D1"
	case D_Sin_D0:
		return "D_Sin_D0"
	case D_Sinh_D0:
		return "D_Sinh_D0"
	case D_Sqrt_D0:
		return "D_Sqrt_D0"
	case D_Subtract_D0:
		return "D_Subtract_D0"
	case D_Subtract_D1:
		return "D_Subtract_D1"
	case D_Tan_D0:
		return "D_Tan_D0"
	case D_Tanh_D0:
		return "D_Tanh_D0"
	case Divide:
		return "Divide"
	case Exp:
		return "Exp"
	case Exp10:
		return "Exp10"
	case Exp2:
		return "Exp2"
	case GetInput:
		return "GetInput"
	case GetModel:
		return "GetModel"
	case Halt:
		return "Halt"
	case Inputs:
		return "Inputs"
	case Literal:
		return "Literal"
	case Log:
		return "Log"
	case Log10:
		return "Log10"
	case Log2:
		return "Log2"
	case Models:
		return "Models"
	case Multiply:
		return "Multiply"
	case Outputs:
		return "Outputs"
	case Pow:
		return "Pow"
	case Registers:
		return "Registers"
	case SetOutput:
		return "SetOutput"
	case Sin:
		return "Sin"
	case Sinh:
		return "Sinh"
	case Sqrt:
		return "Sqrt"
	case Subtract:
		return "Subtract"
	case Tan:
		return "Tan"
	case Tanh:
		return "Tanh"
	}
	panic("illegal state")
}
