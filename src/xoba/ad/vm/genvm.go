package vm

import (
	"os"
	"text/template"
	"xoba/ad/defs"
)

const (
	asm_source = "asm.go"
	vm_source  = "execute.go"
)

func GenVm(args []string) {

	twos := map[VmOp]string{
		Abs:   "math.Abs",
		Acos:  "math.Acos",
		Asin:  "math.Asin",
		Atan:  "math.Atan",
		Cos:   "math.Cos",
		Cosh:  "math.Cosh",
		Exp:   "math.Exp",
		Exp10: "exp10",
		Exp2:  "math.Exp2",
		Log:   "math.Log",
		Log10: "math.Log10",
		Log2:  "math.Log2",
		Sin:   "math.Sin",
		Sinh:  "math.Sinh",
		Sqrt:  "math.Sqrt",
		Tan:   "math.Tan",
		Tanh:  "math.Tanh",
	}

	twoArgFuncs := map[VmOp]string{
		Pow: "math.Pow",
	}

	threes := map[VmOp]string{
		Add:      "+",
		Multiply: "*",
		Divide:   "/",
		Subtract: "-",
	}

	run := func(name, src string) {
		f, err := os.Create(name)
		check(err)
		t := template.Must(template.New(vm_source).Parse("// autogenerated, do not edit!\npackage vm\n" + src))
		t.Execute(f, map[string]interface{}{
			"twos":   twos,
			"threes": threes,
			"funcs":  twoArgFuncs,
		})
		f.Close()
		defs.Gofmt(name)
	}

	run(asm_source, `import(
	"bufio"
	"bytes"
	"encoding/binary"
	"io"
	"log"
	"strconv"
	"strings"
)

func Compile(f io.Reader) Program {
w:= new(bytes.Buffer)
p:=Program{}
	s := bufio.NewScanner(f)
	var fields []string
	tmp := make([]byte, 20)
	putOp := func(o VmOp) {
		n := binary.PutUvarint(tmp, uint64(o))
		w.Write(tmp[:n])
	}
	putInt := func(i int) {
		v, err := strconv.ParseUint(fields[i], 10, 64)
		check(err)
		n := binary.PutUvarint(tmp, v)
		w.Write(tmp[:n])
	}
	putFloat := func(i int) {
		v, err := strconv.ParseFloat(fields[i], 64)
		check(err)
		binary.Write(w, order, v)
	}
	for s.Scan() {
		line := s.Text()
		line = strings.TrimSpace(strings.ToLower(line))
		if len(line) == 0 || line[0] == '#' {
			continue
		}
		fields = strings.Fields(line)
		switch fields[0] {
		case "halt":
			putOp(Halt)
		case "registers":
			putOp(Registers)
			putInt(1)
	        case "haltifdmodelnil":
			putOp(HaltIfDmodelNil)
		case "literal":
			putOp(Literal)
			putInt(1)
			putFloat(2)
		case "setscalaroutput":
			putOp(SetScalarOutput)
			putInt(1)
		case "setvectoroutput":
			putOp(SetVectorOutput)
			putInt(1)
			putInt(2)
		case "multiply":
			putOp(Multiply)
			putInt(1)
			putInt(2)
			putInt(3)
		case "divide":
			putOp(Divide)
			putInt(1)
			putInt(2)
			putInt(3)
		case "subtract":
			putOp(Subtract)
			putInt(1)
			putInt(2)
			putInt(3)
		case "add":
			putOp(Add)
			putInt(1)
			putInt(2)
			putInt(3)
		case "log":
			putOp(Log)
			putInt(1)
			putInt(2)
		case "log10":
			putOp(Log10)
			putInt(1)
			putInt(2)
		default:
			log.Fatalf("unknown opcode: %s", fields[0])
		}
}
	check(s.Err())
	p.Code = w.Bytes()
return p
}`)

	run(vm_source, `import (
"math"
	"bytes"
	"encoding/binary"
"fmt"
)

func Execute(p Program, x, model, dmodel []float64) (y float64, err error) {
	defer func() {
		if r := recover(); r != nil {
			err = fmt.Errorf("recovered from: %v", r)
		}
	}()
	fmt.Printf("%d byte program = 0x%x\n", len(p.Code), p.Code)
	r := bytes.NewReader(p.Code)
	one := func() uint64 {
		a, err := binary.ReadUvarint(r)
		check(err)
		return a
	}
	two := func() (uint64, uint64) {
		a, err := binary.ReadUvarint(r)
		check(err)
		b, err := binary.ReadUvarint(r)
		check(err)
		return a, b
	}
	three := func() (uint64, uint64, uint64) {
		a, err := binary.ReadUvarint(r)
		check(err)
		b, err := binary.ReadUvarint(r)
		check(err)
		c, err := binary.ReadUvarint(r)
		check(err)
		return a, b, c
	}
var registers []float64

Loop:
	for {
		c, err := binary.ReadUvarint(r)
		check(err)
		fmt.Printf("op = %s\n", VmOp(c))
		// general rules:
		// locations stored first, values later
		// source first, destination after
		switch VmOp(c) {
		case Literal: // store a literal to register
                        loc := one()
			var lit float64
			binary.Read(r, order, &lit)
			registers[loc] = lit
		case Registers: 
                        registers = make([]float64,one())
		case SetScalarOutput: // set output from register
			y = registers[one()]
		case SetVectorOutput: // set output from register
			src, dest := two()
			dmodel[dest] = registers[src]
		case HaltIfDmodelNil:
			if dmodel == nil {
				break Loop
			}
		case Halt:
			break Loop

{{range $name,$func := .twos}}case {{$name}}:
			src, dest := two()
			registers[dest] = {{$func}}(registers[src])
{{end}} 

{{range $name,$op := .threes}}case {{$name}}:
			a, b, dest := three()
			registers[dest] = registers[a] {{$op}} registers[b]
{{end}} 

{{range $name,$op := .funcs}}case {{$name}}:
			a, b, dest := three()
			registers[dest] = {{$op}}(registers[a], registers[b])
{{end}} 

	default:
			return 0, fmt.Errorf("unhandled op %s", VmOp(c))
		}
	}
	return
}

`)
}
